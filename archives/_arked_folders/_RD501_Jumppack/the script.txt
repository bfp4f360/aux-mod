//add deleted EH to delete array
//same with killed.

//weird thing, removing radio stop sidechat, but it still calculates.

//
//player allowDamage false;
#include "\a3\editor_f\Data\Scripts\dikCodes.h"


["Namenai Jumppack Mod","Jump",["Jump","Jump"],{ [player] spawn RD501_jumppack_decide_jump;},"",[DIK_Y, [false, true, false]],false] call cba_fnc_addKeybind;
["Namenai Jumppack Mod","Cycle jump type left",["Cycle jump type left","Cycle jump type left"],{[player, -1] spawn RD501_jumppack_cycle_jump;},"",[DIK_G, [false, true, false]],false] call cba_fnc_addKeybind;
["Namenai Jumppack Mod","Cycle jump type right",["Cycle jump type right","Cycle jump type right"],{[player, 1] spawn RD501_jumppack_cycle_jump;},"",[DIK_J, [false, true, false]],false] call cba_fnc_addKeybind;
//["Namenai Jumppack Mod","Show Energy",["Show Energy","Show Energy"],{[player] spawn tcw_fnc_jumppack_show_data;},"",[DIK_K, [false, true, false]],false] call cba_fnc_addKeybind;


player addBackpack "RD501_jumppack_base";

_cba_loadout_delay=0.1;
_cba_frame_load_delay=1;
cba_frame_delay=.1;
publicVariable "cba_frame_delay";

player setVariable ["RD501_jumppack_energy",0,true];
player setVariable ["RD501_jumppack_backpack_class",backpack player,true];
player setVariable ["RD501_jumppack_selected_jump",0,true];
player setVariable ["RD501_jumppack_jump_id",-1,true];
player setVariable ["RD501_jumppack_is_jumping",false,true];
//These handle inv changes/arsenal detection
[missionNamespace,"arsenalClosed", {

	[west, "HQ"] sideChat format["%1 >>> vinilla",time];
	player call RD501_jumppack_entered_arsenal;

}] call bis_fnc_addScriptedEventhandler;

["ACE_arsenal_displayClosed", {

	[west, "HQ"] sideChat format["%1 >>> ACE",time];
	player call RD501_jumppack_entered_arsenal;

}] call CBA_fnc_addEventHandler;

RD501_jumppack_cba_loadout_eh={

	hint format["%1 loadout changed",time];
	//hint format ["%1",_this];

	//First we get the last backppack
	saved_backpack=player getVariable['RD501_jumppack_backpack_class',''];

	//Then we get current backpack
	current_backpack=backpack player;

	//if backpacks are same, dont do anything
	if(saved_backpack isEqualTo current_backpack) exitwith {};

	//if different, update and set energy to 0.
	player setVariable ["RD501_jumppack_backpack_class",current_backpack,true];

	hint format["%1 <<bp changed",current_backpack];
	player setVariable ["RD501_jumppack_energy",0,true];

};

//When u enter arsenal reset energy
RD501_jumppack_entered_arsenal={
	params["_unit"];
	_unit setVariable ["RD501_jumppack_energy",0,true];
};

//add delay to let system yeet(?)
_id_loadout_cba_eh = ["loadout",RD501_jumppack_cba_loadout_eh] call CBA_fnc_addPlayerEventHandler;
//{[RD501_jumppack_cba_loadout_eh, [], _cba_loadout_delay] call CBA_fnc_waitAndExecute;}
RD501_jumppack_energy_recharge={
	params["_args","_id"];

	_unit=_args select 0;

	if(!(alive _unit)) exitwith{
		[_id] call CBA_fnc_removePerFrameHandler;

	};
	
	_has_jumppack=_unit call RD501_jumppack_has_jumppack;
	if(!_has_jumppack) exitwith{};

	_unitBackpackClass=backpack _unit;
	_recharge_value=([(configFile >> "CfgVehicles" >> _unitBackpackClass),"RD501_jumppack_recharge",0] call BIS_fnc_returnConfigEntry)*cba_frame_delay;

	// _recharge_value=_args select 1;

	_curr_energy=_unit getVariable["RD501_jumppack_energy",0];
	_energy_capacity= _unit call RD501_jummpack_get_energy_capacity;

	//no need to recharge if at max.
	if(_curr_energy == _energy_capacity) exitwith {};

	//calc recharge,and round it.
	_new_energy=_curr_energy+_recharge_value;
	_new_energy=(round (_new_energy*100))/100;

	
	//check if overspill.
	if(_new_energy>_energy_capacity) then
	{
		_unit setVariable ["RD501_jumppack_energy",_energy_capacity,true];
	}
	else
	{
		_unit setVariable ["RD501_jumppack_energy",_new_energy,true];
	};

	//If no jumppack,no need to notfiy.
	if(_has_jumppack) then 
	{
		[_curr_energy,_new_energy,_energy_capacity] spawn RD501_jumppack_notify_recharge;
	};
	
	[west, "HQ"] sideChat format["%1 T:%2",_unit getVariable["RD501_jumppack_energy",0],time];
};


RD501_jumppack_decide_jump={
	params["_unit"];
	_has_jumppack=_unit call RD501_jumppack_has_jumppack;

	//if no jumppack,no jump
	if(!_has_jumppack) exitwith
	{
		[format["<t color='#FF0000'>Cant prone jump with this jumptype</t>"], ""] call ace_common_fnc_displayTextPicture;
	};

	//if underwater.
	if((eyePos _unit select 2 < 0) ||(underwater _unit)) exitWIth 
	{
		[format["<t color='#0055FF'>No water jumping</t>"], ""] call ace_common_fnc_displayTextPicture;
	};

	if (!(isNull objectParent _unit))exitWith 
	{	
		[format["<t color='#FF0000'>No jumping in vehicle</t>"], ""] call ace_common_fnc_displayTextPicture;
	};
	_unitBackpackClass=backpack _unit;
	_jumppack_data=[(configFile >> "CfgVehicles" >> _unitBackpackClass),"RD501_jumppack_jump_types",[]] call BIS_fnc_returnConfigEntry;

	//If no jumppack data,exit
	if((count _jumppack_data) ==0) exitWith {};

	_jumppack_jump_index=_unit getVariable["RD501_jumppack_selected_jump",0];
	_current_energy=_unit getVariable["RD501_jumppack_energy",false];

	_selected_jump=_jumppack_data select _jumppack_jump_index;
	_cost=(_selected_jump select 1) select 2;

	//If not enough energy
	if(_cost>_current_energy ) exitwith 
	{
		[format["<t color='#FF0000'>Not Enough Energy</t>"], ""] call ace_common_fnc_displayTextPicture;
	};

	
	_jump_movement_data=_selected_jump select 1;
	
	//get the forward velo,verticle velo and angle of jump
	_velo_data=[_jump_movement_data select 0,_jump_movement_data select 1,_jump_movement_data select 3];
	;
	_prone_flag=_jump_movement_data select 5;
	_directonal_flag=_jump_movement_data select 4;

	_can_prone_jump=(_prone_flag==1);
	_can_directional_jump=(_directonal_flag==1);

	//If cant prone jump,exit
	if ((stance _unit == "PRONE") && !_can_prone_jump) exitWith 
	{
		[] spawn RD501_jumppack_no_prone;
	};

	//test lol
	//_cost=0;

	_unit setVariable ["RD501_jumppack_energy",_current_energy-_cost,true];

	[player,
	_velo_data select 0,
	_velo_data select 1,
	_velo_data select 2,
	nil,
	_can_directional_jump
	] 
	spawn RD501_jumppack_jump;
	//hint format["%1 %2 %3",_cost,_unit getVariable["RD501_jumppack_energy",false],_cost>_current_energy];

};

RD501_add_recharge_frame_eh={
	params["_unit"];
	if(_unit !=player) exitwith{};
	//_has_recharge=_unit getVariable["RD501_jumppack_has_recharge",false];

	//if(_has_recharge) exitwith{};
	_unit setVariable["RD501_jumppack_has_recharge",true,true];
	[
		{
			_handle = [RD501_jumppack_energy_recharge, cba_frame_delay, [player],false] call CBA_fnc_addPerFrameHandler;
			
		}, 
		[], _cba_frame_load_delay
	] call CBA_fnc_waitAndExecute;
};

// [] call RD501_add_recharge_frame_eh;

//makes it so that units get it
["CAManBase", "init",RD501_add_recharge_frame_eh, true, [], true] call CBA_fnc_addClassEventHandler;
//adds when respawn
["CAManBase", "Respawn",RD501_add_recharge_frame_eh, true, [], true] call CBA_fnc_addClassEventHandler;


RD501_jumppack_jump={
	params["_unit","_f_velo","_v_velo","_dir_angle",["_custom_script",""],["_use_dir",false]];

	_unit allowDamage false;
	_unit setVariable ["RD501_jumppack_is_jumping",true,true];
	// /SmokeShellRed
	//RD501_jumppack_jump_id
	_jump_id=random [0, 210000 , 420000];
	_unit setVariable ["RD501_jumppack_jump_id",_jump_id,true];

	//We assume we have to apply the effect, this also determines if we add a idle effect.
	_apply_effect_flag=true;
	_attached_items=_unit getVariable ["RD501_jumppack_effects",[]];
	if((count _attached_items)>0) then
	{
		_apply_effect_flag=false;
	};

	_v_hat=getCameraViewDirection _unit;
	if(!(_use_dir)) then 
	{
		//non directional jump
		_v_hat=vectorDir _unit;
		_v_hat = [_v_hat, _dir_angle] call BIS_fnc_rotateVector2D;
		(_unit) setVelocity 
		[
			((_v_hat select 0) *(_f_velo)),
			((_v_hat select 1) *(_f_velo)),
			(_v_velo)
		]; 	

	}
	else
	{
		//directional jump
		_vertical_sign=(_v_hat select 2)/(abs (_v_hat select 2));
		(_unit) setVelocity 
		[
			((_v_hat select 0) *(_f_velo)),
			((_v_hat select 1) *(_f_velo)),
			((_v_hat select 2) *(_f_velo))+(_v_velo/2)
		]; 	
	};
	//Ignite sound
	_volume=3;
	_dist=30;
	_unitBackpackClass=backpack _unit;
	_sound_path_start=selectRandom([(configFile >> "CfgVehicles" >> _unitBackpackClass),"RD501_jumppack_sound_ignite",[]] call BIS_fnc_returnConfigEntry);
	playSound3D ["RD501_Jumppack\sounds\cdv21Start.ogg", _unit,false, getPosASL _unit,_volume,1,_dist];//"RD501_Jumppack\sounds\cdv21Start.ogg"
	
	if(_apply_effect_flag) then
	{
		_unit_backpack_class=backpack _unit;
		_position_of_effects=[(configFile >> "CfgVehicles" >> _unit_backpack_class),"RD501_jumppack_effect_points",nil] call BIS_fnc_returnConfigEntry;
		_effect_script=([(configFile >> "CfgVehicles" >> _unit_backpack_class),"RD501_jumppack_jump_effect_script",nil] call BIS_fnc_returnConfigEntry);
		[_unit,_position_of_effects] spawn call compile _effect_script;
	};

	sleep .1;
	waitUntil 
	{
		((isTouchingGround _unit) || (_jump_id !=(_unit getVariable ["RD501_jumppack_jump_id",-1])) || (surfaceIsWater getPos _unit ) || !(alive _unit))//(vectorMagnitude (velocity _unit))<.1
	};
	//to give time to let dmg eh not freak out
	sleep .1;
	//if not exists, rip.
	if((_unit isEqualTo objNull)) exitwith
	{
		//leave ,f
	};

	//Checks if another jump happened, if so disregard this timeline
	if(_jump_id !=(_unit getVariable ["RD501_jumppack_jump_id",-1])) exitwith{};

	//if on land, or water, end
	if ((isTouchingGround _unit) || (surfaceIsWater getPos _unit ) || !(alive _unit)) then {
		_unit setVariable ["RD501_jumppack_is_jumping",false,true];
		_unit setVariable ["RD501_jumppack_jump_id",-1,true];
	};
	
	//if not exists, rip.
	// if(!(_unit isEqualTo objNull)) exitwith
	// {
	// 	[_unit] call RD501_remove_effects;
	// };
	
	//landing soundsz
	_unitBackpackClass=backpack _unit;
	_sound_path_landing=selectRandom([(configFile >> "CfgVehicles" >> _unitBackpackClass),"RD501_jumppack_sound_land",[]] call BIS_fnc_returnConfigEntry);
	playSound3D [_sound_path_landing, _unit,false, getPosASL _unit,_volume,1,_dist];//"RD501_Jumppack\sounds\cdv21End.ogg"

	//create landing effect
	[_unit] spawn RD501_landing_effect;
	sleep .25;

	//remove all effects
	[_unit] call RD501_remove_effects;

	//DELAYED to allow arma to not yeet u
	_is_jumping=_unit getVariable ["RD501_jumppack_is_jumping",false];
	if(!_is_jumping) then 
	{
		_unit allowDamage true;
	};
	
	
};

RD501_jumppack_has_jumppack={
	params ["_unit"];
	_currBackpackClass=backpack _unit;
	(configFile >> "CfgVehicles" >>_currBackpackClass >> "RD501_jumppack_is_jumppack") call BIS_fnc_getCfgDataBool
};

RD501_jummpack_get_energy_capacity={
	params["_unit"];
	_unitBackpackClass=backpack _unit;
	[(configFile >> "CfgVehicles" >> _unitBackpackClass),"RD501_jumppack_energy_capacity",0] call BIS_fnc_returnConfigEntry
	
};

RD501_jumppack_proper_mod={
	params["_a","_b"];
	(_a - (floor(_a/_b))*_b)
};

RD501_jumppack_cycle_jump={
	params["_unit","_inc"];
	_has_jumppack=_unit call RD501_jumppack_has_jumppack;
	if(!_has_jumppack) exitwith{};

	_unitBackpackClass=backpack _unit;
	_jumppack_data=[(configFile >> "CfgVehicles" >> _unitBackpackClass),"RD501_jumppack_jump_types",[]] call BIS_fnc_returnConfigEntry;
	_num_jumps=count _jumppack_data;
	_jumppack_jump_index=_unit getVariable["RD501_jumppack_selected_jump",0];

	_new_index=[_jumppack_jump_index+_inc,_num_jumps] call RD501_jumppack_proper_mod;
	_unit setVariable ["RD501_jumppack_selected_jump",_new_index,true];
	//[west, "HQ"] sideChat format["%1 %2 %3",_new_index,time,[_jumppack_jump_index+_inc,_num_jumps]];

	_jump_name=(_jumppack_data select _new_index) select 0;
	hint format ["name: %1 ",_jump_name];


};

RD501_jumppack_no_prone={
	_chance=random [0, .5, 1];
	_textToShow= "No prone jump selected";

	if(_chance<.2) then 
	{
		_textToShow="No Grasshopper";
	};
	[_textToShow, ""] call ace_common_fnc_displayTextPicture;


	// titleText [_textToShow, "PLAIN", -1, true, true];
	// sleep 2;
	// titleText ["", "PLAIN"];
};

RD501_jumppack_notify_recharge={
	params["_curr_energy","_new_energy","_total_energy"];

	_old_ratio=_curr_energy/_total_energy;
	_new_ratio=_new_energy/_total_energy;

	_result=false;
	_thres=0;
	_threshold_list=[.125,.25,.375,.5,.625,.75,.875,1];
	_thres_color="#FFFFFF";
	_threshold_color_list=["#FF0000","#FF4500","#FF8500","#FFA500","#fff200","#aaff00","#55ff00","#00FFFF"];
	{
		if(_old_ratio<_x && _new_ratio>=_x) then {
				_result=true;
				_thres=_x;
				_thres_color= _threshold_color_list select _forEachIndex;
			};
	}foreach _threshold_list;
	
	// if(_old_ratio<.5 && _new_ratio>=.5) then {_result=true};
	// if(_old_ratio<.75 && _new_ratio>=.75) then {_result=true};
	// if(_old_ratio<1 && _new_ratio>=1) then {_result=true};

	if(!_result) exitwith {};
	[format["Energy: <t color='%5'>%1</t>/%2" +"<br />"+ "Percent: <t color='%5'>%3%4</t>",_new_energy,_total_energy,_thres*100,"%",_thres_color], ""] call ace_common_fnc_displayTextPicture;

	
};

RD501_cdv_21_effects={
	params["_unit","_effect_position_list"];
	{ 

		
		params["_unitSpawn","_effectPositionDataSpawn"];
		_effect_position_data=_x;
		_mem_point=_effect_position_data select 0;
		_offset=_effect_position_data select 1;
		

		_blueFireEffect = "#particlesource" createVehicle (getPosASL _unit);  
		_blueFireEffect setParticleClass "TCW_Jumppack_Fire_Blue"; 

		_blueSparkEffect = "#particlesource" createVehicle (getPosASL _unit);  
		_blueSparkEffect setParticleClass "TCW_Jumppack_Spark";

		_smokeTrailEffect = "#particlesource" createVehicle (getPosASL _unit);  
		_smokeTrailEffect setParticleClass "TCW_Jumppack_Smoke";

		_THEBLUELIGHT = "#lightpoint" createVehicle (getPosASL _unit);  
		_THEBLUELIGHT setLightAmbient [0, 0, 0];  
		_THEBLUELIGHT setLightColor [.15, 0.45, 1];  
		_THEBLUELIGHT setLightBrightness 1;

		//_THELIGHT setLightColor [1, 0.45, 0.15];  
		//_THELIGHT setLightBrightness 1;
		_THEBLUELIGHT attachto [_unit, _offset,_mem_point];
		_smokeTrailEffect attachTo [_unit, _offset,_mem_point];
		_blueSparkEffect attachTo [_unit, _offset,_mem_point];
		_blueFireEffect attachTo [_unit, _offset,_mem_point]; //[0, -.3, -.1]	

		_attached_items=_unit getVariable ["RD501_jumppack_effects",[]];

		_attached_items pushBack _THEBLUELIGHT;
		_attached_items pushBack _smokeTrailEffect;
		_attached_items pushBack _blueSparkEffect;
		_attached_items pushBack _blueFireEffect;

		_unit setVariable ["RD501_jumppack_effects",_attached_items,true];

	} forEach _effect_position_list;

	sleep 1;

	_unit call RD501_remove_effects;

};

RD501_remove_effects={
	params["_unit"];

	_attached_items=_unit getVariable ["RD501_jumppack_effects",[]];

	{
		detach  _x;
		deleteVehicle _x;
	} forEach _attached_items;

	_unit setVariable ["RD501_jumppack_effects",[],true];
};

//when delete remove effects
["CAManBase", "Delete",RD501_remove_effects, true, [], true] call CBA_fnc_addClassEventHandler;

RD501_landing_effect={
	params["_unit"];

	_blueFireEffectPulse = "#particlesource" createVehicle (getPosWorld _unit);  
	_blueFireEffectPulse setParticleClass "TCW_Jumppack_Fire_Blue_Pulse";
	_blueFireEffectPulse attachto [_unit, [0,0,0]]; 

	sleep .45;

	detach  _blueFireEffectPulse;
	deleteVehicle _blueFireEffectPulse;
};

// TEST_ACE_MED={
// 	_this = _this select [0, 7];
// 	params ["_unit", "_selection", "_damage", "_shooter", "_projectile", "_hitPointIndex"];

// 	if !(local _unit) exitWith {
// 		nil
// 	};


// 	if (_projectile isEqualType objNull) then {
// 		_projectile = typeOf _projectile;
// 		_this set [4, _projectile];
// 	};

// 	if (_selection == "hands") exitWith {_unit getHit "hands"};
// 	if (_selection == "legs") exitWith {_unit getHit "legs"};
// 	if (_selection == "arms") exitWith {_unit getHit "arms"};





// 	_selection = [_unit, _selection, _hitPointIndex] call ace_medical_fnc_translateSelections;
// 	_this set [1, _selection]; 


// 	if (_selection != "" && {!(_selection in ace_medical_SELECTIONS)}) exitWith {0};

	

// 	if !(_unit getVariable ["ace_medical_allowDamage", true]) exitWith {
// 		if (_selection == "") then {
// 			damage _unit
// 		} else {
// 			_unit getHit _selection
// 		};
// 	};


// 	private _damageReturn = _damage;

// 	private _newDamage = _this call ace_medical_fnc_handleDamage_caching;

// 	private _typeOfDamage = [_projectile] call ace_medical_fnc_getTypeOfDamage;



// 	private _typeIndex = (ace_medical_allAvailableDamageTypes find _typeOfDamage);
				
// 	private _minLethalDamage = if (_typeIndex >= 0) then {
// 		ace_medical_minLethalDamages select _typeIndex
// 	} else {
// 		0.01
// 	};

// 	if (!isNull _shooter) then {
// 		_unit setvariable ["ace_medical_lastDamageSource", _shooter, false];
// 	};

// 	private _vehicle = vehicle _unit;
// 	private _effectiveSelectionName = _selection;

// 	if ((_vehicle != _unit) && {!(_vehicle isKindOf "StaticWeapon")} && {_shooter in [objNull, driver _vehicle, _vehicle]} && {_projectile == ""} && {_selection == ""}) then {
// 		if (ace_medical_enableVehicleCrashes) then {
// 			_effectiveSelectionName = _this select 1; 
// 		};
// 	};

// 	if ((_minLethalDamage <= _newDamage) && {[_unit, [_effectiveSelectionName] call ace_medical_fnc_selectionNameToNumber, _newDamage] call ace_medical_fnc_determineIfFatal}) then {
// 			if ((_unit getVariable ["ace_medical_preventInstaDeath", ace_medical_preventInstaDeath])) exitwith {
// 				_damageReturn = 0.9;
// 			};

// 			if ([_unit, false, true] call ace_medical_fnc_setDead) then {
// 				_damageReturn = 1;
// 			} else {
// 				_damageReturn = _damageReturn min 0.89;
// 			};

// 	} else {
// 		_damageReturn = _damageReturn min 0.89;
// 	};


// 	[_unit] call ace_medical_fnc_addVitalLoop;

// 	if (_unit getVariable ["ace_medical_preventInstaDeath", ace_medical_preventInstaDeath]) exitWith {
// 		private _delayedUnconsicous = false;

// 		if (_vehicle != _unit and {damage _vehicle >= 1}) then {
// 			[_unit] call ace_common_fnc_unloadPerson;
// 			_delayedUnconsicous = true;
// 		};

// 		if (_damageReturn >= 0.9 && {_selection in ["", "head", "body"]}) exitWith {
// 				if (_unit getVariable ["ACE_isUnconscious", false]) exitwith {
// 					[_unit, false, true] call ace_medical_fnc_setDead;
// 					0.89;
// 				};
// 				if (_delayedUnconsicous) then {
// 					[{
// 					[_this select 0, true] call ace_medical_fnc_setUnconscious;
// 				}, [_unit], 0.7] call CBA_fnc_waitAndExecute;
// 			} else {
// 			[{
// 			[_this select 0, true] call ace_medical_fnc_setUnconscious;
// 		}, [_unit]] call CBA_fnc_execNextFrame;
// 		};
// 		0.89;
// 		};

// 		_damageReturn min 0.89;
// 	};

// 	if (((_unit getVariable ["ace_medical_enableRevive", ace_medical_enableRevive]) > 0) && {_damageReturn >= 0.9} && {_selection in ["", "head", "body"]}) exitWith {
// 		if (vehicle _unit != _unit and {damage (vehicle _unit) >= 1}) then {
// 			[_unit] call ace_common_fnc_unloadPerson;
// 		};
// 		[_unit, false, true] call ace_medical_fnc_setDead;
// 		0.89;
// 	};
// 	if(_unit getVariable["RD501_jumppack_is_jumping",false]) then{
// 		hint format["%1 ace",time];
// 		_damageReturn=0;
// 	};

// 	_damageReturn
	
// };



// [{
// 	params["_unit"];
// 	_unit removeAllEventHandlers "HandleDamage";
// 	hint "yeeee";
// 	_unit addEventHandler ["HandleDamage", {
// 		params ["_unit", "_selection", "_damage", "_source", "_projectile", "_hitIndex", "_instigator", "_hitPoint"];

// 		private _ret = damage _unit;
// 		private _vehicle = vehicle _unit;
// 		private _impactVelocity = (velocity _unit) select 2;

// 		_is_jumping=_unit getVariable["RD501_jumppack_is_jumping",false];

// 		//normal
// 		if !(_is_jumping) then{
// 			hint format["%1 HERE",time];
// 			_ret = _this call ace_medical_fnc_handleDamage;
// 		};

// 		//if jumping
// 		if (_is_jumping) then{
// 			_ret=0;
// 			//if normal bullet
// 			if (!(_projectile == "")) then {
// 				hint format["%1 HERE2222222 %2 %3",time,!(isNull _source),!(_projectile == "")];
// 				_ret =_this call ace_medical_fnc_handleDamage;
// 			};
// 		};


		

		
// 		_ret
// 	}];
// },[player],5] call CBA_fnc_waitAndExecute;